// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const THEMES = {
    dark: {
        name: 'theme-dark',
        icon: 'fas fa-sun'
    },
    light: {
        name: 'theme-light',
        icon: 'fas fa-moon'
    }
};

const EMOJI_CATEGORIES = {
    smileys: ["üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä", "üòã", "üòé", "üòç", "ü•∞", "üòò"],
    people: ["üëã", "üëå", "üëç", "üëé", "üëè", "üôå", "üôè", "ü§ù", "üí™", "üß†", "üë®", "üë©", "üë∂", "üë¶", "üëß"],
    animals: ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ"],
    food: ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "üçà", "üçí", "üçë", "ü•≠", "üçç", "ü••", "ü•ù"],
    travel: ["üöó", "üöï", "üöô", "üöå", "üöé", "üèéÔ∏è", "üöì", "üöë", "üöí", "üöê", "üöö", "üöõ", "üöú", "üö≤", "üõ¥"]
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTheme = 'dark';
let chatHistory = [];
let currentChatId = null;
let savedChats = [];
let activeContextMenu = null;
let activeDropdown = null;
let isListening = false;
let recognition = null;
let synth = window.speechSynthesis;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = false;
}

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    messageInput: document.getElementById('message-input'),
    sendBtn: document.getElementById('send-btn'),
    voiceBtn: document.getElementById('voice-btn'),
    chatMessages: document.getElementById('chat-messages'),
    newChatBtn: document.getElementById('new-chat-btn'),
    themeToggle: document.getElementById('theme-toggle'),
    settingsBtn: document.getElementById('settings-btn'),
    emojiBtn: document.getElementById('emoji-btn'),
    attachBtn: document.getElementById('attach-btn'),
    chatList: document.getElementById('chat-list'),
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    settingsModal: document.getElementById('settings-modal'),
    saveDialog: document.getElementById('save-dialog'),
    emojiPicker: document.getElementById('emoji-picker'),
    fileMenu: document.getElementById('file-menu'),
    contextMenu: document.getElementById('context-menu'),
    
    // –ö–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
    saveSettingsBtn: document.getElementById('save-settings'),
    resetSettingsBtn: document.getElementById('reset-settings'),
    confirmSaveBtn: document.getElementById('confirm-save'),
    cancelSaveBtn: document.getElementById('cancel-save'),
    chatNameInput: document.getElementById('chat-name-input'),
    fileInput: document.getElementById('file-input')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettings();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    loadSavedChats();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?

–Ø —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–∞–π—Ç—ã (–±—Ä–∞—É–∑–µ—Ä, YouTube)
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã
‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–∞–π–º–µ—Ä—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≥–æ–¥—É
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä–∞
    initEmojiPicker();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    elements.sendBtn.addEventListener('click', sendMessage);
    elements.messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
    elements.voiceBtn.addEventListener('click', toggleVoiceInput);
    
    // –ù–æ–≤—ã–π —á–∞—Ç
    elements.newChatBtn.addEventListener('click', createNewChat);
    
    // –°–º–µ–Ω–∞ —Ç–µ–º—ã
    elements.themeToggle.addEventListener('click', toggleTheme);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elements.settingsBtn.addEventListener('click', () => toggleModal(elements.settingsModal));
    elements.saveSettingsBtn.addEventListener('click', saveSettings);
    elements.resetSettingsBtn.addEventListener('click', resetSettings);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞
    elements.confirmSaveBtn.addEventListener('click', saveChat);
    elements.cancelSaveBtn.addEventListener('click', () => toggleModal(elements.saveDialog));
    
    // –≠–º–æ–¥–∑–∏
    elements.emojiBtn.addEventListener('click', () => toggleDropdown(elements.emojiPicker));
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    elements.attachBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleDropdown(elements.fileMenu, e.target);
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    document.querySelectorAll('#file-menu .menu-item').forEach(item => {
        item.addEventListener('click', handleFileAction);
    });
    
    elements.fileInput.addEventListener('change', handleFileUpload);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            toggleModal(modal, false);
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
    document.addEventListener('click', (e) => {
        if (activeDropdown && !activeDropdown.contains(e.target) && 
            !e.target.closest('.action-btn')) {
            toggleDropdown(activeDropdown, null, false);
        }
        
        if (activeContextMenu) {
            toggleDropdown(activeContextMenu, null, false);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    if (recognition) {
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            elements.messageInput.value = transcript;
            sendMessage();
        };
        
        recognition.onend = () => {
            isListening = false;
            elements.voiceBtn.innerHTML = '<i class="fas fa-microphone"></i>';
            elements.voiceBtn.classList.remove('listening');
        };
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
function sendMessage() {
    const message = elements.messageInput.value.trim();
    if (!message) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addUserMessage(message);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    elements.messageInput.value = '';
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    processMessage(message);
}

function addUserMessage(text) {
    const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    const messageHtml = `
        <div class="message user">
            <img src="user-avatar.png" alt="User" class="message-avatar">
            <div class="message-content">
                <div class="message-sender">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
                <div class="message-text">${text}</div>
                <div class="message-time">${time}</div>
            </div>
        </div>
    `;
    
    elements.chatMessages.insertAdjacentHTML('beforeend', messageHtml);
    scrollToBottom();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    chatHistory.push({
        sender: 'user',
        text: text,
        time: time
    });
}

function addBotMessage(text) {
    const time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    messageDiv.innerHTML = `
        <img src="bot-avatar.png" alt="Assistant" class="message-avatar">
        <div class="message-content">
            <div class="message-sender">–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
            <div class="message-text">‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</div>
        </div>
    `;
    
    elements.chatMessages.appendChild(messageDiv);
    scrollToBottom();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    setTimeout(() => {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é marked.js –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ markdown
        const formattedText = marked.parse(text);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messageDiv.innerHTML = `
            <img src="bot-avatar.png" alt="Assistant" class="message-avatar">
            <div class="message-content">
                <div class="message-sender">–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
                <div class="message-text">${formattedText}</div>
                <div class="message-time">${time}</div>
            </div>
        `;
        
        scrollToBottom();
        
        // –û–∑–≤—É—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (getSetting('voiceEnabled')) {
            speakText(text);
        }
    }, 500);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    chatHistory.push({
        sender: 'assistant',
        text: text,
        time: time
    });
}

function scrollToBottom() {
    elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function processMessage(text) {
    const textLower = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (containsAny(textLower, ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–∑–¥–æ—Ä–æ–≤–∞"])) {
        const responses = [
            "–ü—Ä–∏–≤–µ—Ç! üëã –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üåü –ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
        ];
        addBotMessage(randomChoice(responses));
    }
    else if (containsAny(textLower, ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞"])) {
        const responses = [
            "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üíØ –ê —É –≤–∞—Å?",
            "–†–∞–±–æ—Ç–∞—é –±–µ–∑ —Å–±–æ–µ–≤! ü§ñ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º!",
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üåà –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –æ–±—â–µ–Ω–∏—é —Å –≤–∞–º–∏!"
        ];
        addBotMessage(randomChoice(responses));
    }
    else if (containsAny(textLower, ["–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä", "–∑–∞–ø—É—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä"])) {
        window.open("https://www.google.com", "_blank");
        addBotMessage("–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä. üåê");
    }
    else if (containsAny(textLower, ["–æ—Ç–∫—Ä–æ–π youtube", "–∑–∞–ø—É—Å—Ç–∏ youtube"])) {
        window.open("https://www.youtube.com", "_blank");
        addBotMessage("–û—Ç–∫—Ä—ã–≤–∞—é YouTube. üì∫");
    }
    else if (containsAny(textLower, ["–æ—Ç–∫—Ä–æ–π –≤–∫", "–æ—Ç–∫—Ä–æ–π –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ"])) {
        window.open("https://vk.com", "_blank");
        addBotMessage("–û—Ç–∫—Ä—ã–≤–∞—é –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üí¨");
    }
    else if (textLower.includes("—Å–ø–∞—Å–∏–±–æ")) {
        const responses = [
            "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä",
            "–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º! üôè",
            "–ù–µ –∑–∞ —á—Ç–æ! üëç –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ!"
        ];
        addBotMessage(randomChoice(responses));
    }
    else if (textLower.includes("–ø–æ–≥–æ–¥–∞")) {
        getWeather(text).then(response => {
            addBotMessage(response);
        });
    }
    else if (textLower.includes("–≤—Ä–µ–º—è") || textLower.includes("–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å")) {
        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        addBotMessage(`–°–µ–π—á–∞—Å ${currentTime}. ‚è∞`);
    }
    else if (textLower.includes("–¥–∞—Ç–∞") || textLower.includes("–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å") || textLower.includes("—á–∏—Å–ª–æ")) {
        const currentDate = new Date().toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
        addBotMessage(`–°–µ–≥–æ–¥–Ω—è ${currentDate}. üìÖ`);
    }
    else if (textLower.includes("–∞–Ω–µ–∫–¥–æ—Ç") || textLower.includes("—à—É—Ç–∫–∞") || textLower.includes("—à—É—Ç–∫—É")) {
        addBotMessage(`–í–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç: ${tellJoke()} üòÑ`);
    }
    else if (textLower.includes("–ø–æ–∏—Å–∫") || textLower.includes("–Ω–∞–π–¥–∏") || textLower.includes("–∑–∞–≥—É–≥–ª–∏")) {
        const query = text.replace(/–ø–æ–∏—Å–∫|–Ω–∞–π–¥–∏|–∑–∞–≥—É–≥–ª–∏/i, '').trim();
        window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, "_blank");
        addBotMessage(`–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: ${query} üîç`);
    }
    else if (textLower.includes("–Ω–æ–≤–æ—Å—Ç–∏") || textLower.includes("—á—Ç–æ –Ω–æ–≤–æ–≥–æ")) {
        getNews().then(response => {
            addBotMessage(response);
        });
    }
    else if (containsAny(textLower, ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–¥–æ –≤—Å—Ç—Ä–µ—á–∏"])) {
        const responses = [
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–π —Å–ª–µ–¥—É—é—â–µ–π –±–µ—Å–µ–¥—ã!",
            "–ü–æ–∫–∞-–ø–æ–∫–∞! üòä –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üåü –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å!"
        ];
        addBotMessage(randomChoice(responses));
    }
    else {
        // –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º API Gemini
        if (containsAny(textLower, ["–Ω–∞–ø–∏—à–∏ –∫–æ–¥", "–Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", "–∫–æ–¥ –¥–ª—è", "—Å–∫—Ä–∏–ø—Ç –¥–ª—è", "—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è", "–∫–ª–∞—Å—Å –¥–ª—è", "–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ", "–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º", "—Å–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑", "—Å—Ä–∞–≤–Ω–∏", "–Ω–∞—Ä–∏—Å—É–π —Ç–∞–±–ª–∏—Ü—É", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ", "–æ–±—ä—è—Å–Ω–∏", "–≤ —á–µ–º –∑–∞–∫–ª—é—á–∞–ª–∞—Å—å", "—Å—É—Ç—å", "–Ω–∞–º–∞–ª—é–π —Ç–∞–±–ª–∏—Ü—é", "–∫—Ç–æ —Ç—ã", "–∑–∞—á–µ–º —Ç—ã —Å–æ–∑–¥–∞–Ω", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–ø–æ–º–æ—â–Ω–∏–∫ —Ç—ã —Ç—É—Ç", "—Å–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –º–æ–µ–π —Å–∏—Å—Ç–µ–º—ã", "–≤—Ä—É–±–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º", "—â–æ —Ç–∞–∫–µ", "—É —è–∫–æ–º—É", "—è–∫", "–∫–æ–ª–∏", "—è–∫–∏–π", "—Ö—Ç–æ", "—è–∫—ñ", "—â–æ", "–¥–ª—è —è–∫–æ–≥–æ", "—è–∫–∏—Ö", "—á–∏–º", "—á–æ–≥–æ"])) {
            askGemini(text).then(response => {
                addBotMessage(response);
            });
        } else {
            const responses = [
                "–Ø –≤–∞—Å –ø–æ–Ω—è–ª, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ. ü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üßê –ù–æ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?",
                "–•–º–º, –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. üí≠ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                "–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å! üìö –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å."
            ];
            addBotMessage(randomChoice(responses));
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function containsAny(str, items) {
    return items.some(item => str.includes(item));
}

function randomChoice(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function getWeather(text) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let city = "–ú–æ—Å–∫–≤–∞";  // –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const words = text.toLowerCase().split(' ');
        const inIndex = words.indexOf('–≤');
        if (inIndex !== -1 && inIndex + 1 < words.length) {
            city = words[inIndex + 1];
            city = city.charAt(0).toUpperCase() + city.slice(1);
        }
        
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY&units=metric&lang=ru`);
        
        if (!response.ok) {
            return `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city}.`;
        }
        
        const data = await response.json();
        const temp = Math.round(data.main.temp);
        const description = data.weather[0].description;
        
        return `–ü–æ–≥–æ–¥–∞ –≤ ${city}: ${description}, ${temp}¬∞C`;
    } catch (error) {
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.";
    }
}

async function getNews() {
    try {
        const newsApiKey = getSetting('newsApiKey') || '975d803806a4439b948a5a2d81ac6086';
        const response = await fetch(`https://newsapi.org/v2/top-headlines?country=ru&apiKey=${newsApiKey}`);
        
        if (!response.ok) {
            return "–°–µ—Ä–≤–∏—Å –Ω–æ–≤–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
        
        const data = await response.json();
        if (data.status === "ok" && data.articles && data.articles.length > 0) {
            const articles = data.articles.slice(0, 5);
            
            let newsText = "–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n";
            articles.forEach((article, i) => {
                newsText += `${i+1}. ${article.title}\n`;
            });
            
            return newsText;
        } else {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    } catch (error) {
        return "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á –æ—Ç newsapi.org";
    }
}

async function askGemini(query) {
    try {
        const geminiApiKey = getSetting('geminiApiKey') || 'AIzaSyD6OqXPs1Iclo1iX9aTW8fgmfkBP85lj_c';
        
        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${geminiApiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: query
                    }]
                }]
            })
        });
        
        if (!response.ok) {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.";
        }
        
        const data = await response.json();
        
        if (data.candidates && data.candidates.length > 0 && 
            data.candidates[0].content && data.candidates[0].content.parts && 
            data.candidates[0].content.parts.length > 0) {
            
            let answer = data.candidates[0].content.parts[0].text;
            
            // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ Gemini
            answer = answer.replace(/Gemini/g, "–ü–æ–º–æ—â–Ω–∏–∫");
            answer = answer.replace(/gemini/g, "–ø–æ–º–æ—â–Ω–∏–∫");
            answer = answer.replace(/Google/g, "–µ–±–ª–∞–Ω–æ–≤");
            answer = answer.replace(/As an AI/g, "–ö–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫");
            answer = answer.replace(/as an AI/g, "–∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫");
            answer = answer.replace(/AI assistant/g, "–ø–æ–º–æ—â–Ω–∏–∫");
            answer = answer.replace(/AI language model/g, "–ø–æ–º–æ—â–Ω–∏–∫");
            
            return answer;
        } else {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.";
        }
    } catch (error) {
        return `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º: ${error.message}`;
    }
}

function tellJoke() {
    const jokes = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–≤–æ–Ω–∏—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: ‚Äî –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–∫–∞–∂–∏—Ç–µ, —É –≤–∞—Å –µ—Å—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –ü–∞—Å–∫–∞–ª—é? ‚Äî –ù–µ—Ç, —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞.",
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ 31 OCT = 25 DEC.",
        "–ó–∞—Ö–æ–¥—è—Ç –∫–∞–∫-—Ç–æ 0 –∏ 1 –≤ –±–∞—Ä. –ë–∞—Ä–º–µ–Ω –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º –¥–≤–æ–∏—á–Ω—ã—Ö.¬ª",
        "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –¥—Ä—É–≥–æ–º—É? ‚Äî –£ —Ç–µ–±—è —Ä—É–±–∞—à–∫–∞ —Å –±–∞–≥–æ–º.",
        "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Ä–∞–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö? ‚Äî –ë–∞–π—Ç–∞–º–∏.",
        "–ü–æ—á–µ–º—É —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? ‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —Å–ª–µ–¥—É—é—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
        "–Ø –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ —Ä–µ–∫—É—Ä—Å–∏—é, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ —è –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª —à—É—Ç–∫—É –ø—Ä–æ —Ä–µ–∫—É—Ä—Å–∏—é.",
        "–ñ–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω: ‚Äî –ö—É–ø–∏ –±—É—Ö–∞–Ω–∫—É —Ö–ª–µ–±–∞, –∞ –µ—Å–ª–∏ –±—É–¥—É—Ç —è–π—Ü–∞, –≤–æ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤–µ—Ä–Ω—É–ª—Å—è —Å 10 –±—É—Ö–∞–Ω–∫–∞–º–∏ —Ö–ª–µ–±–∞: ‚Äî –Ø–π—Ü–∞ –±—ã–ª–∏."
    ];
    return randomChoice(jokes);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–º
function toggleVoiceInput() {
    if (!recognition) {
        addBotMessage("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.");
        return;
    }
    
    if (isListening) {
        recognition.stop();
    } else {
        isListening = true;
        elements.voiceBtn.innerHTML = '<i class="fas fa-microphone-slash"></i>';
        elements.voiceBtn.classList.add('listening');
        
        addBotMessage("–°–ª—É—à–∞—é –≤–∞—Å...");
        recognition.start();
    }
}

function speakText(text) {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç markdown –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    const cleanText = text.replace(/\*\*(.*?)\*\*/g, '$1')
                         .replace(/\*(.*?)\*/g, '$1')
                         .replace(/```.*?```/gs, '')
                         .replace(/$.*?$$.*?$/g, '')
                         .replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '');
    
    // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    const utterance = new SpeechSynthesisUtterance(cleanText);
    utterance.lang = 'ru-RU';
    utterance.volume = parseFloat(getSetting('voiceVolume') || 1);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const voices = synth.getVoices();
    const russianVoice = voices.find(voice => voice.lang.includes('ru'));
    if (russianVoice) {
        utterance.voice = russianVoice;
    }
    
    // –û–∑–≤—É—á–∏–≤–∞–µ–º
    synth.speak(utterance);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI
function toggleTheme() {
    currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–º—ã –Ω–∞ body
    document.body.classList.remove('theme-dark', 'theme-light');
    document.body.classList.add(THEMES[currentTheme].name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
    elements.themeToggle.innerHTML = `<i class="${THEMES[currentTheme].icon}"></i> –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    saveSetting('theme', currentTheme);
}

function toggleModal(modal, show = true) {
    if (show) {
        modal.classList.add('active');
    } else {
        modal.classList.remove('active');
    }
}

function toggleDropdown(dropdown, target = null, show = true) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π dropdown
    if (activeDropdown && activeDropdown !== dropdown) {
        activeDropdown.classList.remove('active');
    }
    
    if (show) {
        dropdown.classList.add('active');
        activeDropdown = dropdown;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º dropdown –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ target
        if (target) {
            const rect = target.getBoundingClientRect();
            
            if (dropdown === elements.fileMenu) {
                dropdown.style.top = `${rect.bottom + 10}px`;
                dropdown.style.left = `${rect.left}px`;
            } else if (dropdown === elements.contextMenu) {
                dropdown.style.top = `${rect.top}px`;
                dropdown.style.left = `${rect.right + 5}px`;
            }
        }
    } else {
        dropdown.classList.remove('active');
        if (activeDropdown === dropdown) {
            activeDropdown = null;
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∑–∏
function initEmojiPicker() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä
    const emojiContent = elements.emojiPicker.querySelector('.emoji-content');
    const emojiTabs = elements.emojiPicker.querySelectorAll('.emoji-tab');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∞–±–æ–≤
    emojiTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const category = tab.dataset.category;
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–±
            emojiTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç–º–æ–¥–∑–∏
            emojiContent.innerHTML = '';
            
            EMOJI_CATEGORIES[category].forEach(emoji => {
                const emojiSpan = document.createElement('div');
                emojiSpan.className = 'emoji';
                emojiSpan.textContent = emoji;
                emojiSpan.addEventListener('click', () => {
                    insertEmoji(emoji);
                });
                emojiContent.appendChild(emojiSpan);
            });
        });
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–± –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    emojiTabs[0].click();
}

function insertEmoji(emoji) {
    const input = elements.messageInput;
    const cursorPos = input.selectionStart;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    const textBefore = input.value.substring(0, cursorPos);
    const textAfter = input.value.substring(cursorPos);
    input.value = textBefore + emoji + textAfter;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    input.selectionStart = input.selectionEnd = cursorPos + emoji.length;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä
    toggleDropdown(elements.emojiPicker, null, false);
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    input.focus();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
function handleFileAction(e) {
    const action = e.target.closest('.menu-item').dataset.action;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
    toggleDropdown(elements.fileMenu, null, false);
    
    switch (action) {
        case 'upload-image':
            elements.fileInput.accept = 'image/*';
            elements.fileInput.click();
            break;
        case 'upload-file':
            elements.fileInput.accept = '*/*';
            elements.fileInput.click();
            break;
        case 'analyze-image':
            elements.fileInput.accept = 'image/*';
            elements.fileInput.dataset.action = 'analyze';
            elements.fileInput.click();
            break;
    }
}

function handleFileUpload(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    const action = elements.fileInput.dataset.action || 'upload';
    
    if (file.type.startsWith('image/')) {
        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const reader = new FileReader();
        reader.onload = function(event) {
            const img = document.createElement('img');
            img.src = event.target.result;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '300px';
            img.style.borderRadius = '8px';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            addUserMessage(`<div class="uploaded-image-container">
                <img src="${event.target.result}" alt="Uploaded image" class="uploaded-image">
                <div class="image-caption">${file.name} (${formatFileSize(file.size)})</div>
            </div>`);
            
            if (action === 'analyze') {
                // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                setTimeout(() => {
                    addBotMessage(`–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '${file.name}':\n\n‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${formatFileSize(file.size)}\n‚Ä¢ –¢–∏–ø —Ñ–∞–π–ª–∞: ${file.type}\n\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.`);
                }, 1000);
            }
        };
        reader.readAsDataURL(file);
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
        addUserMessage(`üìé –§–∞–π–ª: ${file.name} (${formatFileSize(file.size)})`);
        addBotMessage(`–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: ${file.name}\n–†–∞–∑–º–µ—Ä: ${formatFileSize(file.size)}\n–¢–∏–ø: ${file.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –∏ action
    elements.fileInput.value = '';
    elements.fileInput.dataset.action = '';
}

function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' –ë';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' –ö–ë';
    return (bytes / (1024 * 1024)).toFixed(1) + ' –ú–ë';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
function createNewChat() {
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chatHistory = [];
    currentChatId = null;
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    elements.chatMessages.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç ‚ú®");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    updateChatList();
}

function saveChat() {
    if (chatHistory.length === 0) {
        addBotMessage("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. üìù");
        toggleModal(elements.saveDialog, false);
        return;
    }
    
    const chatName = elements.chatNameInput.value.trim() || `–ß–∞—Ç –æ—Ç ${new Date().toLocaleString('ru-RU')}`;
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–∞—Ç–∞
    const chatId = currentChatId || `chat_${Date.now()}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç
    const chatData = {
        id: chatId,
        name: chatName,
        date: new Date().toISOString(),
        messages: chatHistory
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    const existingIndex = savedChats.findIndex(chat => chat.id === chatId);
    if (existingIndex !== -1) {
        savedChats[existingIndex] = chatData;
    } else {
        savedChats.push(chatData);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    currentChatId = chatId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('savedChats', JSON.stringify(savedChats));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    updateChatList();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    toggleModal(elements.saveDialog, false);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    elements.chatNameInput.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage(`–ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '${chatName}' ‚úÖ`);
}

function loadChat(chatId) {
    const chat = savedChats.find(c => c.id === chatId);
    if (!chat) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    currentChatId = chatId;
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    elements.chatMessages.innerHTML = '';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chatHistory = [...chat.messages];
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    chatHistory.forEach(msg => {
        if (msg.sender === 'user') {
            const messageHtml = `
                <div class="message user">
                    <img src="user-avatar.png" alt="User" class="message-avatar">
                    <div class="message-content">
                        <div class="message-sender">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
                        <div class="message-text">${msg.text}</div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                </div>
            `;
            elements.chatMessages.insertAdjacentHTML('beforeend', messageHtml);
        } else {
            const messageHtml = `
                <div class="message assistant">
                    <img src="bot-avatar.png" alt="Assistant" class="message-avatar">
                    <div class="message-content">
                        <div class="message-sender">–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
                        <div class="message-text">${marked.parse(msg.text)}</div>
                        <div class="message-time">${msg.time}</div>
                    </div>
                </div>
            `;
            elements.chatMessages.insertAdjacentHTML('beforeend', messageHtml);
        }
    });
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    scrollToBottom();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    updateChatList();
}

function deleteChat(chatId) {
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —á–∞—Ç–∞
    const chatIndex = savedChats.findIndex(chat => chat.id === chatId);
    if (chatIndex === -1) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —á–∞—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const chatName = savedChats[chatIndex].name;
    
    // –£–¥–∞–ª—è–µ–º —á–∞—Ç
    savedChats.splice(chatIndex, 1);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('savedChats', JSON.stringify(savedChats));
    
    // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (currentChatId === chatId) {
        createNewChat();
    } else {
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        updateChatList();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage(`–ß–∞—Ç '${chatName}' —É–¥–∞–ª–µ–Ω. üóëÔ∏è`);
}

function renameChat(chatId, newName) {
    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Ç
    const chat = savedChats.find(c => c.id === chatId);
    if (!chat) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const oldName = chat.name;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    chat.name = newName;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('savedChats', JSON.stringify(savedChats));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    updateChatList();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage(`–ß–∞—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å '${oldName}' –Ω–∞ '${newName}' ‚úÖ`);
}

function updateChatList() {
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    elements.chatList.innerHTML = '';
    
    if (savedChats.length === 0) {
        const noChats = document.createElement('div');
        noChats.className = 'no-chats';
        noChats.textContent = '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤';
        elements.chatList.appendChild(noChats);
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedChats = [...savedChats].sort((a, b) => 
        new Date(b.date) - new Date(a.date)
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
    sortedChats.forEach(chat => {
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        if (chat.id === currentChatId) {
            chatItem.classList.add('active');
        }
        
        chatItem.innerHTML = `
            <div class="chat-item-icon">üí¨</div>
            <div class="chat-item-text">${chat.name}</div>
            <button class="chat-item-menu">‚ãÆ</button>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —á–∞—Ç—É
        chatItem.addEventListener('click', (e) => {
            if (!e.target.classList.contains('chat-item-menu')) {
                loadChat(chat.id);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é
        const menuBtn = chatItem.querySelector('.chat-item-menu');
        menuBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            showContextMenu(e, chat.id);
        });
        
        elements.chatList.appendChild(chatItem);
    });
}

function showContextMenu(e, chatId) {
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    elements.contextMenu.style.top = `${e.clientY}px`;
    elements.contextMenu.style.left = `${e.clientX}px`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ
    elements.contextMenu.dataset.chatId = chatId;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    toggleDropdown(elements.contextMenu, e.target, true);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const renameBtn = elements.contextMenu.querySelector('[data-action="rename"]');
    const deleteBtn = elements.contextMenu.querySelector('[data-action="delete"]');
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newRenameBtn = renameBtn.cloneNode(true);
    const newDeleteBtn = deleteBtn.cloneNode(true);
    renameBtn.parentNode.replaceChild(newRenameBtn, renameBtn);
    deleteBtn.parentNode.replaceChild(newDeleteBtn, deleteBtn);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    newRenameBtn.addEventListener('click', () => {
        const chat = savedChats.find(c => c.id === chatId);
        if (!chat) return;
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:', chat.name);
        if (newName && newName.trim()) {
            renameChat(chatId, newName.trim());
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        toggleDropdown(elements.contextMenu, null, false);
    });
    
    newDeleteBtn.addEventListener('click', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
            deleteChat(chatId);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        toggleDropdown(elements.contextMenu, null, false);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
function loadSettings() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
    const settings = JSON.parse(localStorage.getItem('settings') || '{}');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    if (settings.theme) {
        currentTheme = settings.theme;
        document.body.classList.add(THEMES[currentTheme].name);
        elements.themeToggle.innerHTML = `<i class="${THEMES[currentTheme].icon}"></i> –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É`;
    } else {
        // –¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.body.classList.add(THEMES.dark.name);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º—É
    if (settings.voiceEnabled !== undefined) {
        document.getElementById('voice-enabled').checked = settings.voiceEnabled;
    }
    
    if (settings.voiceVolume !== undefined) {
        document.getElementById('voice-volume').value = settings.voiceVolume;
    }
    
    if (settings.geminiApiKey) {
        document.getElementById('gemini-api').value = settings.geminiApiKey;
    }
    
    if (settings.wolframApiKey) {
        document.getElementById('wolfram-api').value = settings.wolframApiKey;
    }
}

function loadSavedChats() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –∏–∑ localStorage
    const chats = JSON.parse(localStorage.getItem('savedChats') || '[]');
    savedChats = chats;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    updateChatList();
}

function saveSettings() {
    // –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã
    const settings = {
        theme: currentTheme,
        voiceEnabled: document.getElementById('voice-enabled').checked,
        voiceVolume: document.getElementById('voice-volume').value,
        geminiApiKey: document.getElementById('gemini-api').value,
        wolframApiKey: document.getElementById('wolfram-api').value
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('settings', JSON.stringify(settings));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    toggleModal(elements.settingsModal, false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. ‚úÖ");
}

function resetSettings() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    document.getElementById('voice-enabled').checked = true;
    document.getElementById('voice-volume').value = 1;
    document.getElementById('gemini-api').value = 'AIzaSyD6OqXPs1Iclo1iX9aTW8fgmfkBP85lj_c';
    document.getElementById('wolfram-api').value = '6YEYVK-6RLA8L2ATR';
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    if (currentTheme !== 'dark') {
        currentTheme = 'dark';
        document.body.classList.remove('theme-light');
        document.body.classList.add('theme-dark');
        elements.themeToggle.innerHTML = `<i class="${THEMES.dark.icon}"></i> –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    addBotMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. ‚úÖ");
}

function getSetting(key) {
    const settings = JSON.parse(localStorage.getItem('settings') || '{}');
    return settings[key];
}

function saveSetting(key, value) {
    const settings = JSON.parse(localStorage.getItem('settings') || '{}');
    settings[key] = value;
    localStorage.setItem('settings', JSON.stringify(settings));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initApp);